type Query {
    # Get all movies. Allows paging results and ordering by either title or release year
    movies(limit: Int = 10, first: Int = 0, orderBy: MovieOrderBy = TITLE): [Movie!]

    # Retrieve all people results (paged)
    people(limit: Int = 10, first: Int = 0): [Person!]

    # Get a movie by title
    movieByTitle(title: String): Movie

    # Get an actor by name
    actorByName(name: String): Actor

    # Get an director by name
    directorByName(name: String): Director
}

type Mutation {
    # Add a movie
    addMovie(title: String!, release: Int!): Movie!

    # Add a person to the database
    addPerson(name: String!, born: Int): Person!

    # Set a director for a movie
    directorForMovie(title: String, name: String!): Movie!

    # Add a Role to a movie
    castRole(role: RoleInput): Role!
}

type Subscription {
    movieUpdate: Movie
}

type Movie {
    id: ID
    title: String
    release: Int
    director: Director
    cast: [Actor!]
    roles: [Role!]
}

interface Person {
    id: ID
    name: String
}

# A role in  movie
type Role {
    id: ID!
    name: String
    movie: Movie!
    actor: Actor
}

# A person that acted in a movie
type Actor implements Person {
    id: ID
    name: String
    movies: [Movie!]
}

# A person that directed a movie
type Director implements Person {
    id: ID
    name: String
    born: Int
    directed: [Movie!]
}

# An input object for a new role in a movie
input RoleInput {
    movieId: ID!
    actorId: ID!
    roleName: String
}

# Determine how movies results should be sorted
enum MovieOrderBy {
    TITLE, RELEASE
}
